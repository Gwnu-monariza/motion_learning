#MNIST 데이터셋 불러오기

from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets('MNIST_data', one_hot=True)

#TensorFlow InteractivSession 적용(코드를 유연하게 작성)

import tensorflow as tf
sess = tf.InteractiveSession()

#플레이스홀더(이미지와 출력클래스 노드 생성)
#784=28*28
#None = Batch value
#x = input , y = output
x = tf.placeholder(tf.float32, shape=[None, 784])
y_ = tf.placeholder(tf.float32, shape=[None, 10])

#변수 설정 (가중치, 편향)
#tf.zeros([nodes,class])
#w는 784*10 행렬
#b 10차원 행렬
#세션 시작전 변수 초기화
W = tf.Variable(tf.zeros([784,10]))
b = tf.Variable(tf.zeros([10]))
sess.run(tf.global_variables_initializer())


#회귀모델 도입
#벡화화이미지 x, 가중치 행렬 w, 편향 b 활용
#tf.reduce_sum은 모든 클래스 결과 합하는 함수, tf.reudce_mean은 사용된 이미지들 각각에서 계산된 합의 평균을 구하는 함수
y = tf.nn.softmax(tf.matmul(x,W) + b)
cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))

#모델훈련시키기
#경사하강법 활용 기울기 계산 , 매개변수 조정
#반환된 train_step의 실행은 매개변수를 변화시킴
train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

#이를 반복하여 모델을 훈련시킴
#각각의 훈련 단계에서 50개의 훈련 샘플 추출
#그리고 train_step 실행함
# feed_dict을 이용해 placeholder x,y에게 훈련샘플을 넣어줌
for i in range(1000):
  batch = mnist.train.next_batch(50)
  train_step.run(feed_dict={x: batch[0], y_: batch[1]})


#모델 평가하기
#tf.argmax는 텐서의 한 차원에서 가장 큰 값의 인덱스 반환 
#tf.argmax(y,1)은 모델이 입력을 받고 가장 높은 점수가 나온 레이블임
#argmax는 arrange-max의 약자인듯함 
#모델훈련의 결과값을 저장한 배열 y에서 가장 높은 점수를 가져오는 함수
#tf.equal 함수를 이용해 배열 내에 몇개가 고득점과 일치하는 지 확인함
#[true,false,true,true] = [1,0,1,1]= 0.75 의 정확도
correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))

#정확도 계산하기
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
print(accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels}))

#다중 계층 신경망활용
#가중치 초기화
#기울기가 0이 되는 걸 막기 위해 약간의 잡음을 넣음
#ReLU 뉴런의 포함으로 죽은 뉴런 방지를 위해 편향을 0.1로 초기화
#위 내용을 실행하는 함수 생성
def weight_variable(shape):
  initial = tf.truncated_normal(shape, stddev=0.1)
  return tf.Variable(initial)

def bias_variable(shape):
  initial = tf.constant(0.1, shape=shape)
  return tf.Variable(initial)

#합성곱과 풀링
def conv2d(x, W):
  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')

def max_pool_2x2(x):
  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],
                        strides=[1, 2, 2, 1], padding='SAME')

# 첫 번째 합성곱 계층
#[patch(윈도우 x크기),patch(윈도우 y크기), 채널 수, 필터 갯수)
W_conv1 = weight_variable([5, 5, 1, 32])
b_conv1 = bias_variable([32])

#x를 4D 텐서로 reshape 하기 
#두 번째와 세 번째 차원은 이미지의 가로와 세로 길이, 그리고 마지막 차원은 컬러 채널의 수
x_image = tf.reshape(x, [-1,28,28,1])


#이후 연산 x_image와 가중치텐서에 합성곱 적용, 편향 더하고 ReLU 함수 적용
#출력 값을 구하기 위해 맥스 풀링 적용
h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)
h_pool1 = max_pool_2x2(h_conv1)


#두번째 합성곱 계층
#5x5 윈도우에 64개 필터
W_conv2 = weight_variable([5, 5, 32, 64])
b_conv2 = bias_variable([64])

h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)
h_pool2 = max_pool_2x2(h_conv2)

#완전연결계층
#이미크기 7X7로 감소 이를 1024개의 뉴런으로 연결되는 완전연결계층 구성
#reshape 필요 
#최종 ReLU 함수적용
W_fc1 = weight_variable([7 * 7 * 64, 1024])
b_fc1 = bias_variable([1024])

h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)

#드롭아웃
#오버피팅 방지용
#드롭되지 않을 palsceholder를 만듬
#tf.nn.dropout은 자동으로 뉴런의 출력을 스케일링 함
keep_prob = tf.placeholder(tf.float32)
h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)

#최종 소프트맥스 계층
W_fc2 = weight_variable([1024, 10])
b_fc2 = bias_variable([10])

y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)


#모델훈련 평가
#ADAM 최적화 알고리즘 사용
#드롭아웃 확률을 설정하는 추가변수 keep_prob,을 feed_dict인수를 통해 전달 
#100회 반복 마다 로그 작성
cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y_conv), reduction_indices=[1]))
train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)
correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
sess.run(tf.global_variables_initializer())
for i in range(20000):
  batch = mnist.train.next_batch(50)
  if i%100 == 0:
    train_accuracy = accuracy.eval(feed_dict={
        x:batch[0], y_: batch[1], keep_prob: 1.0})
    print("step %d, training accuracy %g"%(i, train_accuracy))
  train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})

print("test accuracy %g"%accuracy.eval(feed_dict={
    x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))

#1: 드롭아웃은 오버피팅을 줄이는 데 매우 효과적이지만, 
#이번에 다룬 작은 합성곱 신경망에 대해서는, 성능이 드롭아웃을 적용한 경우와 하지 않은 경우가 비슷합니다.
# 드롭아웃은 큰 신경망을 훈련시킬 때 유용합니다. ↩