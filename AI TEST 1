import numpy
import scipy.special

class neuralNetwork:
    
    #신경망 초기화 하기
    def __init__(self, inputnodes, hiddennodes, outputnodes, learningrate):
        #입력, 은닉, 출력 계층의 노드 개수 설정
        self.inodes = inputnodes
        self.hnodes = hiddennodes
        self.onodes = outputnodes
        
        #가중치 행렬  wih who
        #배열 내 가중치는 w_i_j로 표기. 노드 i에서 다음 계층의 노드 j로 연결됨을 의미
        # w11 w21
        # w12 W22 등
        
        self.wih = numpy.random.normal(0.0, pow(self.hnodes, - 0.5),(self.hnodes, self.inodes))
        self.who = numpy.random.normal(0.0, pow(self.onodes, - 0.5),(self.onodes, self.hnodes))
        
                
        #학습률
        self.lr = learningrate
        
        #활성화 함수로 시그모이드 함수를 이용
        self.activation_function = lambda x: scipy.special.expit(x)
        
        pass
     
        #신경망 학습시키기
    def train(self, inputs_list, targets_list):
        #입력 리스트를 2차원의 행렬로 변환
        inputs =numpy.array(inputs_list, ndmin=2).T
        targets = numpy.array(targets_list, ndmin=2).T
        
        #오차는 (실제 값 - 계산 값)
        output_errors = targets - filnal_outputs
        #은닉 계층의 오차는 가중치에 의해 나뉜 출력 계층의 오차들을 재조합해 계산 
        hidden_errors = numpy.dot(self.who.T, output_errors)
        #은닉 계층과 출력 계층 간의 가중치 업데이트
        self.who += self.lr * numpy.dot((output_errors*final_outputs*(1.0-final_outputs)),numpy.transpose(hidden_outputs))
        #은닉 계층과 출력 계층간의 가중치 업데이트
        self.wih += self.lr *numpy.dot((hidden_errors*hidden_outputs*(1.0-hidden_outputs)), numpy.tarnspose(inputs))
    
        #은닉 계층으로 들어오는 신호를 계산
        hidden_inputs = numpy.dot(self.wih,inputs)
        #은닉계층에서 나가는 신호를 계산
        hidden_outputs = self.activation_function(hidden_inputs)
        
        #최종 출력 계층으로 들어오는 신호를 계산
        final_inputs = numpy.dot(self.who, hidden_outputs)
        #최종 출력계층에서 나가는 신호를 계산
        final_outputs = activation_function(final_inputs)
        pass
    
    #신경망에 질의하기
    def query(self, inputs_list):
        
        inputs = numpy.array(inputs_list, ndmin=2).T
        
        
        # 은닉 계층으로 들어오는 신호를 계산
        hidden_inputs = numpy.dot(self.wih, inputs)
        # 은닉 계층에서 나가는 신호를 계산
        hidden_outputs = self.activation_function(hidden_inputs)
     

        # 최종 출력 계층으로 들어오는 신호를 계산
        final_inputs = numpy.dot(self.who, hidden_outputs)
        # 최종 출력 계층에서 나가는 신호를 계산
        final_outputs = self.activation_function(final_inputs)
        
        return final_outputs
   
    #입력, 은닉, 출력 노드의 수
input_nodes = 3
hidden_nodes = 3
output_nodes = 3

#학습률은 0.3 
learning_rate = 0.3

#신경망 인스턴스 생성
n = neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate)

#데이터 경로에 맞게 설정하시길바랍니다. 
data_file = open( "DATA / mnist_train_100.csv", 'r')
data_list = data_file.readlines()
data_file.close()

# 신경망 학습시키기

#학습 데이터 모음 내의 모든 레코드 탐색
for record in training_data_list:
    #레코드를 쉼표에 의해 분리
    all_values =record.split(',')
    #입력 값의 범위와 값 조정
    inputs = (numpy.asfarray(all_values[1:])/ 255.0 * 0.99)+0.01
    # 결과 값 생성(실제 값인 0.99 외에는 모두 0.01)
    targets = numpy.zeros(output_nodes) +0.01
    # all_values[0]은 레코드에 대한 결과 값
    targets[int(all_values[0])]=0.99
    n.train(inputs, targets)
    pass


#파일 불러오기, 배열 데이터의 변수 지정
test_data_file = open("DATA/mnist_test_10.csv",'r')
test_data_list = test_data_file.readlines()
test_data_file.close()

#해당 값 프린트
all_values = test_data_list[0].split(',')
print(all_values[0])

#해당 배열 이미지 띄우기
image_array = numpy.asfarray(all_values[1:]).reshape((28,28))
matplotlib.pyplot.imshow(image_array, cmap='Greys', interpolation='None')

#배열값 나타내기
n.query((numpy.asfarray(all_values[1:])/255.0*0.99)+0.01)
